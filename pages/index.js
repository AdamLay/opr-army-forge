import Head from "next/head";
import Image from "next/image";
import { useEffect, useState, Fragment } from "react";
import styles from "../styles/Home.module.css";

export default function Home() {
  const [army, setArmy] = useState();
  const [list, setList] = useState({
    name: "",
    selections: [],
  });

  useEffect(() => {
    fetch("definitions/alien-hives.json")
      .then((r) => r.json())
      .then((data) => {
        console.log(data);
        setArmy(data);
      });
  }, []);

  var addUnit = (unit) => {
    console.log(unit);
    setList({
      ...list,
      selections: [
        ...list.selections,
        { ...unit, selectionId: list.selections.length },
      ],
    });
  };

  var getEquipment = (id) => {
    var e = army.equipment.filter((e) => e.id === id)[0];
    var range = e.range ? `${e.range}"` : null;
    var attacks = e.attacks ? "A" + e.attacks : null;
    return `${e.name} (${[range, attacks] // Range, then attacks
      .concat(e.specialRules || []) // then special rules
      .filter((m) => !!m) // Remove empty/null entries
      .join(", ")})`; // comma separated list
  };

  var getUpgradeSet = (id) => {
    var set = army.upgrade_sets.filter((s) => s.id === id)[0];
    return set;
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="columns" style={{ minHeight: "100vh" }}>
        {army && (
          <div className="column is-one-quarter">
            <aside
              className={styles.menu + " menu p-4"}
              style={{ minHeight: "100%" }}
            >
              <p className="menu-label">
                {army.name} - v{army.version}
              </p>
              <ul className="menu-list">
                <>
                  {army.units.map((u) => (
                    <li key={u.name}>
                      <a onClick={() => addUnit(u)}>{u.name}</a>
                    </li>
                  ))}
                </>
              </ul>
            </aside>
          </div>
        )}
        <div className="column">
          <main className={styles.main}>
            <h1 className="is-size-3">Army Name</h1>
            <hr />
            <table className="table is-fullwidth">
              <thead>
                <tr>
                  <th>Unit</th>
                  <th>Quality</th>
                  <th>Defense</th>
                  <th>Equipment</th>
                  <th>Cost</th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                {list.selections.map((s, si) => (
                  <Fragment key={si}>
                    <tr>
                      <td>
                        {s.name} {s.size > 1 ? `[${s.size}]` : null}
                      </td>
                      <td>{s.quality}</td>
                      <td>{s.defense}</td>
                      <td>
                        {s.equipment.map((e, i) => (
                          <p key={i}>{getEquipment(e.equipment_id)}</p>
                        ))}
                      </td>
                      <td>{s.cost}pts</td>
                      <td></td>
                    </tr>
                    <tr>
                      <td colSpan="42">
                        {(s.upgrade_sets || [])
                          .map((setId) => getUpgradeSet(setId))
                          .filter((s) => !!s) // remove empty sets?
                          .map((set) => {
                            console.log(set);
                            // Replace any [weapon]
                            // Type replaces replacesWhat
                            return (
                              <div key={set.id}>
                                <p>{set.id}</p>
                                {set.upgrades.map((u, i) => (
                                  <div key={i}>
                                    <p style={{fontWeight:"bold",fontStyle:"italic"}}>
                                      {u.type === "replace" ? (
                                        <span>
                                          Replace {u.affects} {u.replacesWhat}
                                        </span>
                                      ) : (
                                        <span>
                                          Upgrade{" "}
                                          {u.affects
                                            ? `${u.affects} model(s) `
                                            : null}
                                          with {u.select}
                                        </span>
                                      )}
                                    </p>
                                    {u.options.map(opt => <p>{getEquipment(opt.equipment_id)}</p>)}
                                  </div>
                                ))}
                              </div>
                            );
                          })}
                      </td>
                    </tr>
                  </Fragment>
                ))}
              </tbody>
            </table>
          </main>
        </div>
      </div>
    </>
  );
}
